<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>project-parent</artifactId>
		<groupId>com.msb</groupId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>msb-admin</artifactId>
	<name>msb-admin</name>

	<dependencies>
		<!--通用模块-->
		<dependency>
			<groupId>com.msb</groupId>
			<artifactId>common</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>

		<!--aop-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<!-- druid阿里巴巴数据库连接池 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid-spring-boot-starter</artifactId>
		</dependency>

		<!-- mysql驱动包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!--权限框架-->
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>1.7.0</version>
		</dependency>

		<!--aop-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<!-- MP start -->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatisplus-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus</artifactId>
		</dependency>
		<!-- MP end -->
	</dependencies>

	<!--配置文件-->
	<profiles>
		<profile>
			<id>dev</id>
			<properties>
				<profileActive>dev</profileActive>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<profileActive>test</profileActive>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<profileActive>prod</profileActive>
			</properties>
		</profile>
	</profiles>

	<build>
		<finalName>${project.artifactId}-${project.version}</finalName><!--打包名称-->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<!-- 是否替换@xx@表示的maven properties属性值 -->
				<filtering>true</filtering>
				<includes>
					<include>mybatis/mapper/*.xml</include>
					<include>config/application.yml</include>
					<include>config/application-${profileActive}.yml</include>
					<include>application.yml</include>
					<include>application-${profileActive}.yml</include>
					<include>logback/logback.xml</include>
					<include>logback/logback-spring.xml</include>
					<include>logback/logback-level-config.xml</include>
					<include>logback/logback-${profileActive}.xml</include>
				</includes>
			</resource>
		</resources>

		<plugins>
			<!-- 插件一定要在其他构建插件之上，否则打包文件会有问题。 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- docker的maven插件，官网：
                  https://github.com/spotify/docker-maven-plugin -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.2.0</version>
				<!--生成镜像相关配置-->
				<configuration>
					<!-- 将forceTags设为true，这样就会覆盖构建相同标签的镜像  -->
					<forceTags>true</forceTags>
					<pushImage>true</pushImage>
					<!-- 远程 docker 宿主机地址, 端口号是/lib/systemd/system/docker.service所暴露的端口号, 生成镜像到docker中 -->
					<dockerHost>http://192.168.0.110:2375</dockerHost>
					<!--内容是之前修改的maven的settings.xml配置文件中，server节点的id-->
					<serverId>docker-aliyun</serverId>
					<!-- 镜像名：阿里云镜像仓库地址
                                ${project.artifactId}引用当前工程名，
                                ${project.version}引用当前工程版本号
                                registry.cn-hangzhou.aliyuncs.com/quickers/msb-admin:0.0.1-SNAPSHOT -->
					<imageName>registry.cn-beijing.aliyuncs.com/quickers/${project.artifactId}:${project.version}</imageName>
					<!--基础镜像 FORM java-->
					<!--<baseImage>jdk:1.8</baseImage>-->
					<baseImage>java</baseImage>
					<!--类似于Dockerfile的ENTRYPOINT指令 java -jar /app.jar-->
					<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
					<resources>
						<resource>  <!-- 指定打包的资源文件 -->
							<targetPath>/</targetPath> <!-- 指定要复制的目录路径，这里是当前目录 -->
							<directory>${project.build.directory}</directory> <!-- 指定要复制的根目录，这里是target目录 -->
							<include>${project.build.finalName}.jar</include> <!-- 这里指定最后生成的jar包 -->
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
